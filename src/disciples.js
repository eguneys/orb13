import { objForeach, objMap } from './util2';
import * as v from './vec2';

export default function Disciples() {

  this.width = 64;
  this.height = 64;

  let maps = [
    Map.main
  ];

  let tiles,
      tiles2;

  let nbW,
      nbH;

  this.init = (data) => {
    let map = data.map;
    tiles = readMap(maps[map]);
    tiles2 = readMap2(maps[map]);
  };



  let vNeighbors = {
    ne: [-1, -1],
    n: [0, -1],
    nw: [1, -1],
    e: [-1, 0],
    m: [0, 0],
    w: [1, 0],
    se: [-1, 1],
    s: [0, 1],
    sw: [1, 1]
  };


  this.getNeighbors = pos => objMap(vNeighbors, (_, vN) => {
    let nPos = v.cadd(pos, vN),
        nKey = pos2key(nPos);

    return tiles[nKey];    
  });

  this.getBitmaskTextureKey = (role, neighbors) => {
    let roles = objMap(neighbors, (_, n) => n && this.getRoleByTile(n));

    if (roles.n !== role) {
      if (roles.e !== role) {
        return 'nw';
      } else if (roles.w !== role) {
        return 'sw';
      } else {
        return 'w';
      }
    }
    if (roles.s !== role) {
      if (roles.e !== role) {
        return 'ne';
      } else if (roles.w !== role) {
        return 'se';
      } else {
        return 'e';
      }
    }
    if (roles.e !== role) {
      return 'n';
    }
    if (roles.w !== role) {
      return 's';
    }

    return 'm';
  };

  this.each = fn => {
    objForeach(tiles, (key, tile) => {
      fn(key2pos(key), tile);
    });
  };

  this.getRoleByTile = tile => tile.role;
  
  this.getPos = pos => tiles[pos2key(pos)];

  const makeMapReader = (fn) => source => {
    let res = {};
    let lines = source.trim().split('\n');
    for (let i = 0; i < lines.length; i++) {
      let line = lines[i];
      for (let j = 0; j < line.length; j++) {
        let chr = line[j];
        
        let tile = fn(chr);
        if (tile) {
          res[pos2key([j, i])] = tile;
        }
      }
    }
    return res;    
  };

  const readMap = makeMapReader(makeRole);
  const readMap2 = makeMapReader(makeRole2);

}

export const pos2key = pos => pos[0] + ';' + pos[1];
export const key2pos = key => key.split(';').map(_ => parseInt(_));

const Role = {
  GROUND: {
  },
  WATER: {
  },
  MOUNTAIN: {
  }
};

const RoleCode = {
  '.': 'GROUND',
  '~': 'WATER',
  'm': 'GROUND'
};

const RoleCode2 = {
  'm': 'MOUNTAIN'  
};

function roleMaker(Role, RoleCode) {
  let id = 0;

  return function(roleCode) {
    id++;
    const result = {key: id};

    const role = RoleCode[roleCode];
    const obj = Role[role] || {};

    obj.role = role;

    Object.keys(obj).map((key) => {
      result[key] = obj[key];
    });

    return result;
  };
}

const makeRole = roleMaker(Role, RoleCode);
const makeRole2 = roleMaker(Role, RoleCode2);

const Map = {
  'main': `
................................................................
................................................................
.....~~~~~......................................................
.....~~~~~......................................................
.....~~~........................................................
.....~~~..................................................~~~...
......................................................~~~~~~~~~~
...................................................~~~~~~~~~~~~~
.................................................~~~~~~.........
..............................................~~~~~~~...........
............................................~~~~....~~~~~.......
..............................................~~~~~~~~~~~.......
............................................~~~.......~~~.......
...........................................~~~~......~~~~.......
.........................................~~~~~......~~~~........
........................................~~~~~.......~~~.........
........................................~~~......~~~~...........
.........................................~~~~~~~~~~.............
.........................................~~..~~~~...............
.........................................~...~.~~...............
.........................................~..~~.~~...............
.........................................~~~~~~~................
.........................................~~~~...................
........................................~~~~....................
......................................~~~~......................
...............................m....~~~~........................
..................................~~~~~.........................
...........................m....~~~~~...........................
....................m.........~~~~~.............................
....................m.......~~~~~...............................
...................m.....~~~~~..................................
.........................~~~~~~.................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................

`
};
